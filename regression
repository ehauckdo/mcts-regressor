#! /usr/bin/env python

import sys
import logging
import optparse
import random
from MCTS.MCTS import MCTS 
from ExpressionModule.ExpressionHandler import ExpressionHandler
from Utility.Utility import prepareLogDirectory

def parseArgs(args):
    usage = "usage: %prog [options]"
    parser = optparse.OptionParser(usage=usage)    

    parser.add_option('-l', action="store", type="string", dest="folder",
        help="Select the folder to save results", default="default")
    parser.add_option('-v', action="store", type="int", dest="numvars",
        help="The number of variables to use for regression", default=1)
    parser.add_option('-i', action="store", type="int", dest="iterations",
        help="The number of MCTS iterations", default=50000)
    parser.add_option('-o', action="store", type="string", dest="objective",
        help="Objective function in polish notation", default="add add mul x x x 2")
    parser.add_option('-d', action="store", type="int", dest="depth",
        help="The maximum tree depth", default=7)
    parser.add_option('-s', action="store", type="int", dest="seed",
        help="Seed for this execution", default=None)
    parser.add_option('-e', action="store", type="int", dest="executions",
        help="How many executions of the MCTS", default=1)
    parser.add_option('--lower', action="store", type="float", dest="lower",
        help="Lower value for samples", default=-10)
    parser.add_option('--upper', action="store", type="float", dest="upper",
        help="Upper value for samples", default=10)
    parser.add_option('--points', action="store", type="int", dest="points",
        help="Number of equally spaced points between upper and lower bounds", default=100)
    parser.add_option('--samples', action="store", type="int", dest="samples",
        help="Number of samples to be selected from domain", default=50)
    parser.add_option('--verbose', action="store_true", dest="verbose",
        help="Log everything during execution")
   
    (opt, args) = parser.parse_args()
    return opt

# For multiple executions of MCTS, remove the current logging handler
# and create a new one pointing to a log file in the appropriate folder
def resetLoggingModule(folder, loggingLevel):
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
    
    prepareLogDirectory(folder)
    prepareLogDirectory(folder+"iterations/")
    logging.basicConfig(filename=folder+"log",level=loggingLevel, filemode='w')

def main(args):
    opt = parseArgs(args)

    if opt.seed != None:
        random.seed(opt.seed)

    for i in range(opt.executions):
        loggingFolder = "logs/"+opt.folder+"/"+str(i)+"/"
        resetLoggingModule(loggingFolder, logging.DEBUG if opt.verbose == True else logging.INFO)
        handlerObject = ExpressionHandler(opt.objective, opt.numvars, loggingFolder, opt.lower, opt.upper, opt.points, opt.samples)
        handlerObject.maxSolutionSize = opt.depth

        mcts = MCTS(handlerObject, opt.iterations)
        mcts.run()

if __name__ == '__main__':
    main(sys.argv[1:])

